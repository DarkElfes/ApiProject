@page "/profile"
@using System.Security.Claims
@using ApiProject.Shared.Users.Commands

@attribute [Authorize]

<Breadcrumbs />
<MudPaper Elevation="4" Class="pa-4">
    <AuthorizeView Context="userContext">
        <MudStack Spacing="6">

            <MudStack>
                <MudText Color="Color.Primary" Typo="Typo.h5">Profile</MudText>
                <MudTextField Label="Name" T="string" ReadOnly
                              AdornmentIcon="@Icons.Material.Filled.Edit" Adornment="Adornment.End" AdornmentColor="Color.Primary" OnAdornmentClick="UpdateUsernameAsync"
                              Text="@userContext.User.Identity!.Name" />

                <MudTextField Label="Email" T="string" ReadOnly
                              AdornmentText="Cannot be changed" Adornment="Adornment.End" AdornmentColor="Color.Warning"
                              Text="@userContext.User.Claims.FirstOrDefault(c => c.Type.Equals(ClaimTypes.Email))!.Value" />
            </MudStack>

            <MudStack Row Justify="Justify.SpaceBetween">
                <MudButton Color="Color.Primary"
                           Variant="Variant.Outlined"
                           OnClick="UpdatePasswordAsync">
                    Change Password
                </MudButton>
                <MudButton Color="Color.Secondary"
                           Variant="Variant.Filled"
                           OnClick="SignOutAsync">
                    Logout
                </MudButton>
            </MudStack>
        </MudStack>
    </AuthorizeView>
</MudPaper>

@code {
    [Inject] public required NavigationManager Navigation { get; set; }
    [Inject] public required AuthService AuthService { get; set; }
    [Inject] public required ISnackbar Snackbar { get; set; }

    private Task UpdateUsernameAsync()
        => Task.FromResult(Snackbar.Add("Not inplemented yet", Severity.Error));

    private Task UpdatePasswordAsync()
        => Task.FromResult(Snackbar.Add("Not inplemented yet", Severity.Error));

    private async Task SignOutAsync()
        => await AuthService.SignOutAsync();
}

