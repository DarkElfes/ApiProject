@page "/profile"
@using System.Security.Claims
@using ApiProject.Client.Web.Users
@using ApiProject.Shared.Users.Commands

@attribute [Authorize]


<Breadcrumbs />
<MudPaper Elevation="4" Class="pa-4">
    <AuthorizeView Context="userContext">
        <EditForm Model="@model" OnValidSubmit="UpdateAsync" FormName="UpdateUserInfo">
            <MudStack Spacing="2">
                <MudText Color="Color.Primary" Typo="Typo.h5">Profile</MudText>
                <DataAnnotationsValidator />

                <MudTextField Label="Name"
                              @bind-Value="model.Username"
                              For="(() => model.Username)"
                              Text="@userContext.User.Identity!.Name"
                              OnlyValidateIfDirty />
                <MudTextField Label="Email"
                              T="string"
                              AdornmentText="Cannot be changed" Adornment="Adornment.End" AdornmentColor="Color.Warning"
                              ReadOnly
                              Text="@userContext.User.Claims.FirstOrDefault(c => c.Type.Equals(ClaimTypes.Email))!.Value" />
                <MudTextField Label="Password"
                              @bind-Value="model.Password"
                              For="@(() =>model.Password)"
                              InputType="InputType.Password"
                              OnlyValidateIfDirty />

                <MudStack Row Justify="Justify.FlexEnd">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Update info</MudButton>
                    <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="SignOutAsync">Logout</MudButton>
                </MudStack>
            </MudStack>
        </EditForm>
    </AuthorizeView>
</MudPaper>

@code {
    [Inject] public required NavigationManager Navigation { get; set; }
    [Inject] public required AuthService AuthService { get; set; }
    [Inject] public required ISnackbar Snackbar { get; set; }

    private UpdateUserCommand model = new();

    private async Task UpdateAsync()
    {
        var result = await AuthService.UpdateInfoAsync(model);

        if (result.IsSuccess)
        {
            Snackbar.Add("Info is successully updated", Severity.Success);
        }
        else
        {
            Snackbar.Add(result.Errors.FirstOrDefault()!.Message, Severity.Error);
        }
    }

    private async Task SignOutAsync()
        => await AuthService.SignOutAsync();
}

