@using ApiProject.Shared.Users;
@using ApiProject.Shared.Users.Commands
@using static ApiProject.Client.Web.Pages.Auth.Auth

<EditForm Model="@model" OnValidSubmit="RegisterAsync" FormName="Register">
    <MudStack Spacing="2">
        <MudText Align="Align.Center" Typo="Typo.h5" Color="Color.Primary">Rregister</MudText>
        <Blazored.FluentValidation.FluentValidationValidator />

        <MudTextField Label="Username"
                      @bind-Value="model.Username"
                      For="@(() => model.Username)"
                      OnlyValidateIfDirty />
        <MudTextField Label="Email"
                      @bind-Value="model.Email"
                      For="@(() => model.Email)"
                      OnlyValidateIfDirty />
        <MudTextField Label="Password"
                      @bind-Value="model.Password"
                      For="@(() => model.Password)"
                      OnlyValidateIfDirty />

        <MudStack Row Justify="Justify.SpaceBetween">
            <MudText Class="align-self-end">
                Already exist account? <MudLink OnClick="AuthState.ChangForm">Login</MudLink>
            </MudText>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Disabled="@AuthState.InAction"
                       ButtonType="ButtonType.Submit">
                Register
            </MudButton>
        </MudStack>
    </MudStack>
</EditForm>

@code {
    [Inject] public required AuthService AuthService { get; set; }
    [Inject] public required NavigationManager Navigation { get; set; }
    [Inject] public required ISnackbar Snackbar { get; set; }

    [Parameter] public required AuthState AuthState { get; set; }

    RegisterUserCommand model { get; set; } = new();

    async Task RegisterAsync()
        => await AuthState.DoActionAsync(Task.Run(async () =>
    {
        var result = await AuthService.RegisterAsync(model);

        if (result.IsSuccess)
        {
            Snackbar.Add("You have successfully registered", Severity.Success);
            Navigation.NavigateTo("/");
        }
        else
        {
            Snackbar.Add(result.Errors.FirstOrDefault()!.Message, Severity.Error);
        }
    }));
}

