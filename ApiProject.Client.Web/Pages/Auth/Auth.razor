@page "/auth"
@using ApiProject.Shared.Users

@implements IDisposable

<Breadcrumbs DisableNavigation />

<MudPaper MaxWidth="500px" Elevation="5" Class="pa-4" Square>
    <MudStack Spacing="4">
        @if (authState.IsLogin)
        {
            <LoginForm AuthState="@authState" />
        }
        else
        {
            <RegisterForm AuthState="@authState" />
        }
        <MudButton StartIcon="@Icons.Custom.Brands.Google"
                   OnClick="LoginByGoogleAsync"
                   Variant="Variant.Outlined"
                   Disabled="@authState.InAction"
                   Class="align-self-center"
                   Color="Color.Primary">
            Sign in with Google
        </MudButton>
    </MudStack>
</MudPaper>

@code {
    [Inject] public required AuthService AuthService { get; set; }

    private AuthState authState { get; set; } = new();

    protected override void OnInitialized()
        => authState.AuthStateChanged += StateHasChanged;

    public void Dispose()
        => authState.AuthStateChanged -= StateHasChanged;


    async Task LoginByGoogleAsync()
        => await authState.DoActionAsync(AuthService.GetChallangeForGoogleAsync());

    public class AuthState
    {
        public bool IsLogin { get; private set; } = true;
        public bool InAction { get; private set; }
        public event Action? AuthStateChanged;

        public void ChangForm()
        {
            IsLogin = !IsLogin;
            AuthStateChanged?.Invoke();
        }

        public void SetActionState(bool inAction)
        {
            InAction = inAction;
            AuthStateChanged?.Invoke();
        }

        public async Task DoActionAsync(Task task)
        {
            SetActionState(true);
            await task;
            SetActionState(false);
        }
    }
}
